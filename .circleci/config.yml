version: 2

references:
## Cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace
  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/test-results
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

jobs:
  check-build:
    docker:
      # specify the version you desire here
      - image: circleci/android:api-27-alpha
    working_directory: ~/code
    steps:
      - checkout
      - run: echo "Running..."
      - restore_cache:
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
            name: Download Dependencies
            command: ./gradlew androidDependencies
      - save_cache:
            paths:
              - ~/.gradle
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
            name: Initial build
            command: ./gradlew clean assembleDebug --no-daemon --stacktrace
      - store_artifacts:
            path: app/build/outputs/apk/
            destination: apks/
  dev-build:
    docker:
      # specify the version you desire here
      - image: circleci/android:api-27-alpha
    working_directory: ~/code
    steps:
      - checkout
      - run: echo "Running..."
      - restore_cache:
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew

      - run:
            name: Download Dependencies
            command: ./gradlew androidDependencies
      - save_cache:
            paths:
              - ~/.gradle
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
            name: Initial build
            command: ./gradlew clean assembleDebug --no-daemon --stacktrace
      - store_artifacts:
            path: app/build/outputs/apk/
            destination: apks/
      - run:
            name: Upload to Slack
            command: |
              export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 | sed -E 's/^[^ ]+ (.*)$/\1/g')
              curl -F file=@app/build/outputs/apk/debug/app-debug.apk -F channels=$SLACK_CHANNEL -F token=$SLACK_API_TOKEN -F title="${CIRCLE_PROJECT_REPONAME} | branch -> ${CIRCLE_BRANCH} | commit -> ${GIT_COMMIT_DESC}"  https://slack.com/api/files.upload
  prod-build:
    docker:
      # specify the version you desire here
      - image: circleci/android:api-27-alpha
    working_directory: ~/code
    steps:
      - checkout
      - run: echo "Running..."
      - restore_cache:
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
     - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew

      - run:
            name: Download Dependencies
            command: ./gradlew androidDependencies
      - save_cache:
            paths:
              - ~/.gradle
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
            name: Initial build
            command: ./gradlew clean assembleRelease --no-daemon --stacktrace
      - store_artifacts:
            path: app/build/outputs/apk/
            destination: apks/
      - run:
            name: Upload to Slack
            command: |
              export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 | sed -E 's/^[^ ]+ (.*)$/\1/g')
              curl -F file=@app/build/outputs/apk/release/app-release.apk -F channels=$SLACK_CHANNEL -F token=$SLACK_API_TOKEN -F title="${CIRCLE_PROJECT_REPONAME} | branch -> ${CIRCLE_BRANCH} | commit -> ${GIT_COMMIT_DESC}"  https://slack.com/api/files.upload
 ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ##Deploy release APK to Fabric Beta
  deploy:
    <<: *android_config
    steps:
      - checkout
      - *attach_release_workspace
      - *restore_cache

      - run:
          name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
          command: sudo chmod +x ./gradlew
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
#      - run:
#          name: Deploy to Fabric Beta
#          command: ./gradlew -PciBuild=true :app:crashlyticsUploadDistributionRelease

workflows:
  version: 2
  workflow:
    jobs:
      - test_unit
      - check-build:
          filters:
            branches:
              ignore:
                - master
                - develop
      - dev-build:
          filters:
            branches:
              only: develop

      - prod-build:
          filters:
            branches:
              only: master